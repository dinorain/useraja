// Code generated by MockGen. DO NOT EDIT.
// Source: redis_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/dinorain/useraja/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRedisRepository is a mock of UserRedisRepository interface.
type MockUserRedisRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRedisRepositoryMockRecorder
}

// MockUserRedisRepositoryMockRecorder is the mock recorder for MockUserRedisRepository.
type MockUserRedisRepositoryMockRecorder struct {
	mock *MockUserRedisRepository
}

// NewMockUserRedisRepository creates a new mock instance.
func NewMockUserRedisRepository(ctrl *gomock.Controller) *MockUserRedisRepository {
	mock := &MockUserRedisRepository{ctrl: ctrl}
	mock.recorder = &MockUserRedisRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRedisRepository) EXPECT() *MockUserRedisRepositoryMockRecorder {
	return m.recorder
}

// DeleteUserCtx mocks base method.
func (m *MockUserRedisRepository) DeleteUserCtx(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserCtx", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserCtx indicates an expected call of DeleteUserCtx.
func (mr *MockUserRedisRepositoryMockRecorder) DeleteUserCtx(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserCtx", reflect.TypeOf((*MockUserRedisRepository)(nil).DeleteUserCtx), ctx, key)
}

// GetByIdCtx mocks base method.
func (m *MockUserRedisRepository) GetByIdCtx(ctx context.Context, key string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIdCtx", ctx, key)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIdCtx indicates an expected call of GetByIdCtx.
func (mr *MockUserRedisRepositoryMockRecorder) GetByIdCtx(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIdCtx", reflect.TypeOf((*MockUserRedisRepository)(nil).GetByIdCtx), ctx, key)
}

// SetUserCtx mocks base method.
func (m *MockUserRedisRepository) SetUserCtx(ctx context.Context, key string, seconds int, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserCtx", ctx, key, seconds, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserCtx indicates an expected call of SetUserCtx.
func (mr *MockUserRedisRepositoryMockRecorder) SetUserCtx(ctx, key, seconds, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserCtx", reflect.TypeOf((*MockUserRedisRepository)(nil).SetUserCtx), ctx, key, seconds, user)
}
